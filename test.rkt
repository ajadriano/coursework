#lang racket/base

(require rackunit rackunit/text-ui)
(require "sudoku.rkt")

(define puzzle1 '((9 0 0 3 0 0 4 0 0)(0 0 6 0 4 8 0 0 9)(5 1 0 0 0 0 0 6 0)(7 0 0 0 0 3 9 0 0)(0 0 0 0 1 0 0 0 0)(0 0 9 5 0 0 0 0 3)(0 4 0 0 0 0 0 9 2)(3 0 0 2 9 0 1 0 0)(0 0 2 0 0 5 0 0 7)))
(define puzzle2 '((0 0 0 0 4 0 0 0 0)(0 0 2 8 0 7 3 0 0)(6 0 0 0 0 0 0 0 2)(0 7 0 0 6 0 0 5 0)(1 0 0 0 0 0 0 0 9)(0 2 0 0 9 0 0 4 0)(3 0 0 0 0 0 0 0 5)(0 0 1 2 0 9 7 0 0)(0 0 0 0 1 0 0 0 0)))
(define puzzle3 '((0 2 5 0 0 1 0 0 0) (1 0 4 2 5 0 0 0 0) (0 0 6 0 0 4 2 1 0) (0 5 0 0 0 0 3 2 0) (6 0 0 0 2 0 0 0 9) (0 8 7 0 0 0 0 6 0) (0 9 1 5 0 0 6 0 0) (0 0 0 0 7 8 1 0 3) (0 0 0 6 0 0 5 9 0)))
(define invalidpuzzle '((9 0 0 3 0 0 4 0 0)(0 0 6 0 4 8 0 0 9)(10 1 0 0 0 0 0 6 0)(7 0 0 0 0 3 9 0 0)(0 0 0 0 1 0 0 0 0)(0 0 9 5 0 0 0 0 3)(0 4 0 0 0 0 0 9 2)(3 0 0 2 9 0 1 0 0)(0 0 2 0 0 5 0 0 7)))
(define solution1 
 '((9 7 8 3 5 6 4 2 1)
  (2 3 6 1 4 8 7 5 9)
  (5 1 4 7 2 9 3 6 8)
  (7 2 1 8 6 3 9 4 5)
  (4 5 3 9 1 2 8 7 6)
  (6 8 9 5 7 4 2 1 3)
  (8 4 7 6 3 1 5 9 2)
  (3 6 5 2 9 7 1 8 4)
  (1 9 2 4 8 5 6 3 7))
)
(define solution2
  '((7 3 9 6 4 2 5 1 8)
  (4 1 2 8 5 7 3 9 6)
  (6 8 5 9 3 1 4 7 2)
  (9 7 4 3 6 8 2 5 1)
  (1 5 6 7 2 4 8 3 9)
  (8 2 3 1 9 5 6 4 7)
  (3 9 8 4 7 6 1 2 5)
  (5 4 1 2 8 9 7 6 3)
  (2 6 7 5 1 3 9 8 4))
 )
(define solution3
  '((8 2 5 7 6 1 9 3 4)
  (1 3 4 2 5 9 7 8 6)
  (9 7 6 8 3 4 2 1 5)
  (4 5 9 1 8 6 3 2 7)
  (6 1 3 4 2 7 8 5 9)
  (2 8 7 3 9 5 4 6 1)
  (3 9 1 5 4 2 6 7 8)
  (5 6 2 9 7 8 1 4 3)
  (7 4 8 6 1 3 5 9 2))
)
(define emptysudoku '((0 0 0 0 0 0 0 0 0)(0 0 0 0 0 0 0 0 0)(0 0 0 0 0 0 0 0 0)(0 0 0 0 0 0 0 0 0)(0 0 0 0 0 0 0 0 0)(0 0 0 0 0 0 0 0 0)(0 0 0 0 0 0 0 0 0)(0 0 0 0 0 0 0 0 0)(0 0 0 0 0 0 0 0 0)))
(define emptysudokutransformed
   '(((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)))
)
(define transformedpuzzle1
  '(((9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (3)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (4)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (6)
   (1 2 3 4 5 6 7 8 9)
   (4)
   (8)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (9))
  ((5)
   (1)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (6)
   (1 2 3 4 5 6 7 8 9))
  ((7)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (3)
   (9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (9)
   (5)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (3))
  ((1 2 3 4 5 6 7 8 9)
   (4)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (9)
   (2))
  ((3)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (2)
   (9)
   (1 2 3 4 5 6 7 8 9)
   (1)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (2)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (5)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (7)))
  )
(define candidatetesting
   '(((1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9))
  ((4)
   (5)
   (6)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((7)
   (8)
   (9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((2)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((3)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((5)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((6)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((8)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9))
  ((9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)
   (1 2 3 4 5 6 7 8 9)))
)

(define sudoku-tests
	(test-suite "Tests for file.rkt"
		(test-case "solve puzzle"
                    (check-equal? (solve puzzle1) solution1)
                    (check-equal? (solve puzzle2) solution2)
                    (check-equal? (solve puzzle3) solution3)
                )
                (test-case "flatten array"
                    (check-equal? (flattensolution '(((1) (2) (3)))) '((1 2 3)))
                )
                (test-case "transform array"
                    (check-equal? (transform emptysudoku) emptysudokutransformed)
                    (check-equal? (transform puzzle1) transformedpuzzle1)
                )
                (test-case "validsudoku"
                    (check-equal? (isvalidsudoku puzzle1) puzzle1)
                )
                (test-case "invalidsudoku"
                    (check-exn exn:fail? (lambda () (isvalidsudoku 1)))
                    (check-exn exn:fail? (lambda () (isvalidsudoku '(1))))
                    (check-exn exn:fail? (lambda () (isvalidsudoku (cdr emptysudoku))))
                    (check-exn exn:fail? (lambda () (isvalidsudoku invalidpuzzle)))
                )
                (test-case "nosolutionsudoku"
                    (check-exn exn:fail? (lambda () (solve emptysudoku)))
                )
                (test-case "checkallsingleton"
                    (check-equal? (allcellssingleton emptysudokutransformed) #f)
                    (check-equal? (allcellssingleton '(((1) (2)))) #t)
                )
                (test-case "getcell"
                    (check-equal? (getcell 1 1 puzzle1) 0)
                    (check-equal? (getcell 0 0 puzzle1) 9)
                    (check-equal? (getcell 4 3 transformedpuzzle1) '(1 2 3 4 5 6 7 8 9))
                )
                (test-case "getblock"
                    (check-equal? (getblock 0 puzzle1) '(9 0 0 0 0 6 5 1 0))
                    (check-equal? (getblock 8 puzzle1) '(0 9 2 1 0 0 0 0 7))
                )
                (test-case "getothercandidates"          
                    (check-equal? (getothercandidatesfromrow 0 0 candidatetesting) '(2 3 4 5 6 7 8 9))
                    (check-equal? (getothercandidatesfromblock 0 0 candidatetesting) '(2 3 4 5 6 7 8 9))
                    (check-equal? (getothercandidatesfromcolumn 0 0 candidatetesting) '(4 7 2 3 5 6 8 9))
                )
	)
)
